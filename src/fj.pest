WHITESPACE = _{ " " | WHITE_SPACE | NEWLINE }
COMMENT = _{
    "/*" ~ (!"*/" ~ ANY)* ~ "*/"
    | "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE
}

ident = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

script_input = _{
    SOI
    ~ (class_definition | eval_block)*
    ~ EOI
}

eval_block = _{
    "eval" ~ "{"
    ~ term
    ~ "}"
}

program = _{
    SOI ~ class_definition+ ~ EOI
}

eval_input_term = _{
    SOI ~ term ~ EOI
}

class_definition = {
    "class" ~ ident ~ "extends" ~ ident ~ "{"
    ~ field_definition*
    ~ constructor
    ~ method_definition*
    ~ "}"
}

field_definition = {
    ident ~ ident ~ ";"
}

constructor = {
    ident ~ "(" ~ arg_list? ~ ")" ~ "{"
    ~ super_call
    ~ assignment*
    ~ "}"
}

super_call = _{
    "super" ~ "(" ~ field_list? ~ ")" ~ ";"
}

assignment = {
    "this" ~ "." ~ ident ~ "=" ~ ident ~ ";"
}

arg_list = {
    ident ~ ident ~ ("," ~ ident ~ ident)* ~ ","?
}

method_definition = {
    ident ~ ident ~ "(" ~ arg_list? ~ ")" ~ "{"
    ~ "return" ~ term ~ ";"
    ~ "}"
}

// NOTE: left recursion removed from term
term = {
    term_left ~ dot_chain*
}

// NOTE: cast is syntactically more specific than parenthesis
term_left = {
     cast
    |  "(" ~ term ~ ")"
    | new_call
    | ident
}

dot_chain = {
    method_call
    | field_access
}

field_access = {
    "." ~ ident
}

method_call = {
"." ~ ident ~ "(" ~ term_list? ~ ")"
}

cast = {
    "(" ~ ident ~ ")" ~ term
}

new_call = {
    "new" ~ ident ~ "(" ~ term_list? ~ ")"
}

term_list = _{
    term ~ ("," ~ term)* ~ ","?
}

field_list = {
    ident ~ ("," ~ ident)* ~ ","?
}





